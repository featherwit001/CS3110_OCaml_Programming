let rec ( @ ) lst1 lst2 =
  match lst1 with
  | [] -> lst2
  | h :: t -> h :: (t @ lst2)

Claim: forall lst, lst @ [] = lst

Proof: by induction on list.
P(lst) = lst = lst @ []

Base case : lst = []
Show: [] @ [] = []
  [] @ []
={evaluation}
  []

Inductive case: lst = h :: t
IH: P(lst) = t = t @ []
Show: (h :: t) @ [] = []


  (h :: t) @ [] 
={evaluation}
  h :: (t @ [])
={IH}
  h :: t

QED.